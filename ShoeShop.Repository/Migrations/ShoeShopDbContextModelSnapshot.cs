// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeShop.Repository.Data;

#nullable disable

namespace ShoeShop.Repository.Migrations
{
    [DbContext(typeof(ShoeShopDbContext))]
    partial class ShoeShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("ShoeShop.Repository.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoeColorVariationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("ShoeColorVariationId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Shoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "A-Brand",
                            Cost = 50.00m,
                            CreatedDate = new DateTime(2025, 10, 1, 1, 30, 29, 598, DateTimeKind.Utc).AddTicks(1718),
                            Description = "Lightweight running shoe.",
                            IsActive = true,
                            Name = "Runner 5000",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 2,
                            Brand = "B-Casual",
                            Cost = 35.00m,
                            CreatedDate = new DateTime(2025, 10, 1, 1, 30, 29, 598, DateTimeKind.Utc).AddTicks(1978),
                            Description = "Everyday casual sneaker.",
                            IsActive = true,
                            Name = "Streetwalker Classic",
                            Price = 90.00m
                        },
                        new
                        {
                            Id = 3,
                            Brand = "C-Hoops",
                            Cost = 80.00m,
                            CreatedDate = new DateTime(2025, 10, 1, 1, 30, 29, 598, DateTimeKind.Utc).AddTicks(1980),
                            Description = "Professional basketball shoe.",
                            IsActive = true,
                            Name = "Court King Pro",
                            Price = 180.00m
                        });
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.ShoeColorVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.ToTable("ColorVariations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorName = "Black/White",
                            HexCode = "#000000",
                            IsActive = true,
                            ReorderLevel = 10,
                            ShoeId = 1,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 2,
                            ColorName = "Volt Green",
                            HexCode = "#CCFF00",
                            IsActive = true,
                            ReorderLevel = 10,
                            ShoeId = 1,
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 3,
                            ColorName = "Pure White",
                            HexCode = "#FFFFFF",
                            IsActive = true,
                            ReorderLevel = 5,
                            ShoeId = 2,
                            StockQuantity = 5
                        },
                        new
                        {
                            Id = 4,
                            ColorName = "Navy Blue",
                            HexCode = "#000080",
                            IsActive = true,
                            ReorderLevel = 5,
                            ShoeId = 2,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 5,
                            ColorName = "Red Hot",
                            HexCode = "#FF0000",
                            IsActive = true,
                            ReorderLevel = 8,
                            ShoeId = 3,
                            StockQuantity = 12
                        });
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.StockPullOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PullOutDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ShoeColorVariationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShoeColorVariationId");

                    b.ToTable("StockPullOuts");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main St",
                            ContactEmail = "contact@alpha.com",
                            ContactPhone = "123-456-7890",
                            IsActive = true,
                            Name = "Alpha Footwear Co."
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Elm Ave",
                            ContactEmail = "info@beta.net",
                            ContactPhone = "987-654-3210",
                            IsActive = true,
                            Name = "Beta Sneakers Inc."
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Oak Ln",
                            ContactEmail = "sales@gamma.org",
                            ContactPhone = "555-123-4567",
                            IsActive = true,
                            Name = "Gamma Sports Gear"
                        });
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("ShoeShop.Repository.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("ShoeShop.Repository.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeShop.Repository.Entities.ShoeColorVariation", "ShoeColorVariation")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ShoeColorVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("ShoeColorVariation");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.ShoeColorVariation", b =>
                {
                    b.HasOne("ShoeShop.Repository.Entities.Shoe", "Shoe")
                        .WithMany("ColorVariations")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.StockPullOut", b =>
                {
                    b.HasOne("ShoeShop.Repository.Entities.ShoeColorVariation", "ShoeColorVariation")
                        .WithMany("StockPullOuts")
                        .HasForeignKey("ShoeColorVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoeColorVariation");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.Shoe", b =>
                {
                    b.Navigation("ColorVariations");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.ShoeColorVariation", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockPullOuts");
                });

            modelBuilder.Entity("ShoeShop.Repository.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
